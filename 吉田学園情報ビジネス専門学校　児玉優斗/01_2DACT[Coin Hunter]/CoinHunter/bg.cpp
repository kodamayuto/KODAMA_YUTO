//*****************************************************************************
//
//					DirectX 頂点バッファ [bg.cpp]
//						Author Kodama Yuto
//
//*****************************************************************************
#include "bg.h"

//=============================================================================
//								マクロ定義
//=============================================================================
#define MAX_BG_TEXTURE (3)

//=============================================================================
//							グローバル変数宣言
//=============================================================================
LPDIRECT3DVERTEXBUFFER9 g_pVtxBuffBG = NULL;				//頂点バッファへのポインタ
LPDIRECT3DTEXTURE9 g_pTextureBG[MAX_BG_TEXTURE] = {};	                    //テクスチャへのポインタ

int g_nCounterBG = 0;
//-----------------------------------------------------------------------------
//						   背景の初期化処理
//-----------------------------------------------------------------------------
void InitBG(void)
{
	//変数宣言
	LPDIRECT3DDEVICE9 pDevice;		//デバイスの取得
	
	pDevice = GetDevice();
	VERTEX_2D *pVtx;				//頂点情報へのポインタ

	g_nCounterBG = 0;
	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, BG_TEXTURE,&g_pTextureBG[0]);
	D3DXCreateTextureFromFile(pDevice, BG_MOUNTEN_TEXTURE, &g_pTextureBG[1]);
	D3DXCreateTextureFromFile(pDevice, BG_TEXTURE_001, &g_pTextureBG[2]);


	//頂点バッファの生成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_2D) * 4 * 2,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,
		D3DPOOL_MANAGED,
		&g_pVtxBuffBG,
		NULL);

	//頂点バッファをロックし、頂点データへのポインタを取得
	g_pVtxBuffBG->Lock(0, 0, (void**)&pVtx, 0);


	//頂点座標
	pVtx[0].pos = D3DXVECTOR3(BG_POS_X, BG_POS_Y, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(BG_WIDTH, BG_POS_Y, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(BG_POS_X, BG_HEIGHT, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(BG_WIDTH, BG_HEIGHT, 0.0f);

	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	//頂点カラー
	pVtx[0].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[1].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[2].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[3].col = D3DCOLOR_RGBA(255, 255, 255, 255);

	//テクスチャ座標
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	pVtx += 4;
	//頂点座標
	pVtx[0].pos = D3DXVECTOR3(BG_POS_X, 500, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(BG_WIDTH, 500, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(BG_POS_X, BG_HEIGHT, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(BG_WIDTH, BG_HEIGHT, 0.0f);

	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	//頂点カラー
	pVtx[0].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[1].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[2].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[3].col = D3DCOLOR_RGBA(255, 255, 255, 255);

	//テクスチャ座標
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	//頂点バッファをアンロックする
	g_pVtxBuffBG->Unlock();
}

//-----------------------------------------------------------------------------
//						   背景の終了処理
//-----------------------------------------------------------------------------
void UninitBG(void)
{
	//テクスチャの破棄
	for (int nCntTex = 0; nCntTex < MAX_BG_TEXTURE; nCntTex++)
	{
		if (g_pTextureBG[nCntTex] != NULL)
		{
			g_pTextureBG[nCntTex]->Release();
			g_pTextureBG[nCntTex] = NULL;
		}
	}

	//頂点バッファの破棄
	if (g_pVtxBuffBG != NULL)
	{
		g_pVtxBuffBG->Release();
		g_pVtxBuffBG = NULL;
	}
}

//-----------------------------------------------------------------------------
//							背景の更新処理
//-----------------------------------------------------------------------------
void UpdateBG(void)
{
	VERTEX_2D *pVtx;				//頂点情報へのポインタ
	g_nCounterBG++;

	//頂点バッファをロックし、頂点データへのポインタを取得
	g_pVtxBuffBG->Lock(0, 0, (void**)&pVtx, 0);
	pVtx[0].tex = D3DXVECTOR2(0.00005f * -g_nCounterBG + 0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(0.00005f * -g_nCounterBG + 0.25f,0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.00005f * -g_nCounterBG + 0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(0.00005f * -g_nCounterBG + 0.25f,1.0f);


	//頂点バッファをアンロックする
	g_pVtxBuffBG->Unlock();

}

//-----------------------------------------------------------------------------
//							背景の描画処理
//-----------------------------------------------------------------------------
void DrawBG(void)
{
	//変数宣言
	LPDIRECT3DDEVICE9 pDevice;

	//デバイスの取得
	pDevice = GetDevice();

	//描画
	pDevice->SetStreamSource(0, g_pVtxBuffBG, 0, sizeof(VERTEX_2D));//頂点バッファをデバイスのデータストリームに設定

	pDevice->SetFVF(FVF_VERTEX_2D);//頂点フォーマットの設定

	switch (GetNumStage())
	{
	case 0:
		for (int nCntTex = 0; nCntTex < 2; nCntTex++)
		{

			pDevice->SetTexture(0, g_pTextureBG[nCntTex]);//テクスチャの設定

														  //ポリゴンの描画
			pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP,//プリミティブの種類		    //プリミティブ == ポリゴン
				4 * nCntTex,					   //開始する頂点のインデックス(基本０)
				2);		   	       //プリミティブの数			
		}

		break;
	case 1:
		for (int nCntTex = 0; nCntTex < 1; nCntTex++)
		{

			pDevice->SetTexture(0, g_pTextureBG[nCntTex]);//テクスチャの設定

			//ポリゴンの描画
			pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP,//プリミティブの種類		    //プリミティブ == ポリゴン
				4 * nCntTex,					   //開始する頂点のインデックス(基本０)
				2);		   	       //プリミティブの数			
		}
		break;
	case 2:
		for (int nCntTex = 0; nCntTex < 2; nCntTex++)
		{

			pDevice->SetTexture(0, g_pTextureBG[nCntTex]);//テクスチャの設定

														  //ポリゴンの描画
			pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP,//プリミティブの種類		    //プリミティブ == ポリゴン
				4 * nCntTex,					   //開始する頂点のインデックス(基本０)
				2);		   	       //プリミティブの数			
		}
		break;
	case 3:
		pDevice->SetTexture(0, g_pTextureBG[2]);//テクスチャの設定

													  //ポリゴンの描画
		pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP,//プリミティブの種類		    //プリミティブ == ポリゴン
			0,					   //開始する頂点のインデックス(基本０)
			2);		   	       //プリミティブの数	
		break;
	case 4:
		pDevice->SetTexture(0, g_pTextureBG[2]);//テクスチャの設定

												//ポリゴンの描画
		pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP,//プリミティブの種類		    //プリミティブ == ポリゴン
			0,					   //開始する頂点のインデックス(基本０)
			2);		   	       //プリミティブの数	

		pDevice->SetTexture(0, g_pTextureBG[1]);//テクスチャの設定

												//ポリゴンの描画
		pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP,//プリミティブの種類		    //プリミティブ == ポリゴン
			4,					   //開始する頂点のインデックス(基本０)
			2);		   	       //プリミティブの数	

		break;

	}
}

