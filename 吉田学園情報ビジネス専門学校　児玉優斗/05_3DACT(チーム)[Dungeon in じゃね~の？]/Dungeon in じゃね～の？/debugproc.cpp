//=============================================================================
//
// デバック表示処理 [debugproc.cpp]
// Author : 岸田怜(Kishida Rei)
//
//=============================================================================
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdarg.h>
#include "main.h"
#include "debugproc.h"
#include "manager.h"
#include "renderer.h"

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************
LPD3DXFONT CDebugProc::m_pFont = NULL;	//フォントのポインタ
char CDebugProc::m_astr[1024] = {};
//=============================================================================
// 関数名：コンストラクタ
// 関数の概要：生成されたときに呼び出される。値のクリア
//=============================================================================
CDebugProc::CDebugProc()
{
}

//=============================================================================
// 関数名：デストラクタ
// 関数の概要：最後に呼び出される
//=============================================================================
CDebugProc::~CDebugProc()
{
}

//=============================================================================
// 関数名：デバッグの初期化処理
// 関数の概要：フォントの生成
//=============================================================================
void CDebugProc::Init(void)
{
	//レンダラーの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	// デバッグ情報表示用フォントの生成
	D3DXCreateFont(pDevice, 18, 0, 0, 0, FALSE, SHIFTJIS_CHARSET,
		OUT_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH, "Terminal", &m_pFont);
}

//=============================================================================
// 関数名：デバッグの終了処理
// 関数の概要：フォントの破棄
//=============================================================================
void CDebugProc::Uninit(void)
{
	// デバッグ情報表示用フォントの破棄
	if (m_pFont != NULL)
	{
		m_pFont->Release();
		m_pFont = NULL;
	}
}

//=============================================================================
// 関数名：書き込み処理
// 関数の概要：表示する文字を書き込む
//=============================================================================
void CDebugProc::Print(char * fmt, ...)
{
	char aCData[1024];
	va_list ap;
	// 可変長引数を１個の変数にまとめる
	va_start(ap, fmt);
	// まとめられた変数で処理する
	vsprintf(aCData, fmt, ap);

	va_end(ap);
	strcat(m_astr, aCData);
}

//=============================================================================
// 関数名：描画処理
// 関数の概要：文字の表示
//=============================================================================
void CDebugProc::Draw(void)
{
	RECT rect = { 0, 15, SCREEN_WIDTH, SCREEN_HEIGHT };


	// テキスト描画
	m_pFont->DrawText(NULL, m_astr, -1, &rect, DT_LEFT, D3DCOLOR_ARGB(0xff, 0xff, 0xff, 0xff));
	strcpy(m_astr, "");
}
