//=============================================================================
//
//	アイテムカウンタの処理[シーン] [itemcounter.cpp]
// Author :岸田怜(KishidaRei)
//
//=============================================================================5
#include "main.h"
#include "renderer.h"
#include "itemcounter.h"
#include "scene.h"
#include "number.h"

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************
CNumber *CItemCounter::m_apNumber[COUNTER_NUMBER] = {};		//数字
 int CItemCounter::m_nCoin = 0;								//コインの数
 int CItemCounter::m_nKey = 0;								//カギの数
 int CItemCounter::m_nKeyMax = 0;								//カギの最大数

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define	COUNTER_WIDTH (30.0f)
#define	COUNTER_HEIGHT (45.0f)


//=============================================================================
// 関数名：コンストラクタ
// 関数の概要：生成されたときに呼び出される。値のクリア
//=============================================================================
CItemCounter::CItemCounter(int nPriority, OBJTYPE type) : CScene(nPriority, type)
{
}

//=============================================================================
// 関数名：デストラクタ
// 関数の概要：最後に呼び出される
//=============================================================================
CItemCounter::~CItemCounter()
{
}

//=============================================================================
// 関数名：アイテムカウンタの生成
// 関数の概要：2アイテムカウンタを生成する
//=============================================================================
CItemCounter * CItemCounter::Create(void)
{
	//スコアの生成
	CItemCounter *pItemCounter;
	pItemCounter = new CItemCounter;

	if (pItemCounter != NULL)
	{
		//スコアの初期化処理
		pItemCounter->Init();
	}

	return pItemCounter;
}

//=============================================================================
// 関数名：アイテムカウンタの初期化処理
// 関数の概要：--
//=============================================================================
HRESULT CItemCounter::Init(void)
{

	//数字の生成
	m_apNumber[0] = CNumber::Create(D3DXVECTOR3(250.0f, 50.0f, 0.0f), COUNTER_WIDTH, COUNTER_HEIGHT);
	m_apNumber[1] = CNumber::Create(D3DXVECTOR3(250.0f, 150.0f, 0.0f), COUNTER_WIDTH, COUNTER_HEIGHT);
	m_apNumber[2] = CNumber::Create(D3DXVECTOR3(350.0f, 150.0f, 0.0f), COUNTER_WIDTH, COUNTER_HEIGHT);

	//スコアのオブジェクトの設定
	SetObjType(CScene::OBJTYPE_ITEMCOUNTER);

	//コインの数の初期化
	m_nCoin = 0;

	//カギの数の初期化
	m_nKey = 0;

	//カギの最大数の初期化
	m_nKeyMax = 6;
	m_apNumber[2]->SetNumber(m_nKeyMax);

	return S_OK;
}

//=============================================================================
// 関数名：アイテムカウンタの終了処理
// 関数の概要：数字を終了させてオブジェクトを破棄する
//=============================================================================
void CItemCounter::Uninit(void)
{
	for (int nCntItemCounter = 0; nCntItemCounter < COUNTER_NUMBER; nCntItemCounter++)
	{
		m_apNumber[nCntItemCounter]->Uninit();
		delete m_apNumber[nCntItemCounter];
		m_apNumber[nCntItemCounter] = NULL;
	}

	//オブジェクトの破棄
	Release();
}

//=============================================================================
// 関数名：アイテムカウンタの更新処理
// 関数の概要：--
//=============================================================================
void CItemCounter::Update(void)
{

}

//=============================================================================
// 関数名：アイテムカウンタの描画処理
// 関数の概要：--
//=============================================================================
void CItemCounter::Draw(void)
{
	for (int nCntItemCounter = 0; nCntItemCounter < COUNTER_NUMBER; nCntItemCounter++)
	{
		m_apNumber[nCntItemCounter]->Draw();
	}
}

//=============================================================================
// 関数名：コインの数の取得処理
// 関数の概要：--
//=============================================================================
int CItemCounter::GetCoin(void)
{
	return m_nCoin;
}

//=============================================================================
// 関数名：カギの数の取得処理
// 関数の概要：--
//=============================================================================
int CItemCounter::GetKey(void)
{
	return m_nKey;
}

//=============================================================================
// 関数名：カギの数の取得処理
// 関数の概要：--
//=============================================================================
int CItemCounter::GetMaxKey(void)
{
	return m_nKeyMax;
}

//=============================================================================
// 関数名：コインの数の加算処理
// 関数の概要：--
//=============================================================================
void CItemCounter::AddCoin(int nValue)
{
	m_nCoin += nValue;
	m_apNumber[0]->SetNumber(m_nCoin);

}

//=============================================================================
// 関数名：カギの数の加算処理
// 関数の概要：--
//=============================================================================
void CItemCounter::AddKey(int nValue)
{
	m_nKey += nValue;
	if (m_nKey > 6)
	{
		m_nKey = 6;
	}
	m_apNumber[1]->SetNumber(m_nKey);
}

//=============================================================================
// 関数名：カギの最大数の加算処理
// 関数の概要：--
//=============================================================================
void CItemCounter::AddKeyMax(int nValue)
{
	m_nKeyMax += nValue;
	m_apNumber[2]->SetNumber(m_nKey);

}

//=============================================================================
// 関数名：コインの数の設定
// 関数の概要：--
//=============================================================================
void CItemCounter::SetCoinNum(int nValue)
{
	m_nCoin = nValue;
	m_apNumber[0]->SetNumber(m_nCoin);

}
