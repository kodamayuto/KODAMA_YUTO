//=======================================================================================================================
//
// チュートリアル処理 [tutorial.cpp]
// Author :岸田怜(Kishida Rei)
//
//=======================================================================================================================
#include "main.h"
#include "renderer.h"
#include "scene.h"
#include "scene2D.h"
#include "manager.h"
#include "input.h"
#include "player.h"
#include "ui.h"
#include"number.h"
#include "timer.h"
#include "title.h"
#include "game.h"
#include "tutorial.h"
#include "tutologo.h"
#include "fade.h"
//********************************************************************************************
// 静的メンバ変数
//********************************************************************************************
CTutoLogo	*CTutorial::m_pTutoLogo = NULL;
//=============================================================================
// 関数名：コンストラクタ
// 関数の概要：生成されたときに呼び出される。値のクリア
//=============================================================================
CTutorial::CTutorial()
{

}

//=============================================================================
// 関数名：デストラクタ
// 関数の概要：最後に呼び出される
//=============================================================================
CTutorial::~CTutorial()
{

}




//=============================================================================
// 関数名：チュートリアルの初期化処理
// 関数の概要：使用するテクスチャやモデルの読み込み
//=============================================================================
HRESULT CTutorial::Init(void)
{
	//チュートリアルロゴの読み込み
	m_pTutoLogo->Load();

	//チュートリアルロゴの生成
	m_pTutoLogo->Create();

	return S_OK;

}
//=============================================================================
// 関数名：チュートリアルの終了処理
// 関数の概要：使用するテクスチャやモデルの破棄、シーンの破棄
//=============================================================================
void CTutorial::Uninit()
{

	//全シーンの破棄
	CScene::ReleaseSceneAll();

	//チュートリアルロゴの読み込み
	m_pTutoLogo->Unload();



}
//=============================================================================
// 関数名：チュートリアルの更新処理
// 関数の概要：--
//=============================================================================
void CTutorial::Update()
{
	//フェードの取得
	CFade::FADE pFade;
	pFade = CFade::GetFade();


	//デバイスの取得
	CInputKeyboard *pInputKeyboard;
	pInputKeyboard = CManager::GetInputKeyboard();

	////if (pInputKeyboard->GetKeyboardTrigger(DIK_RETURN) == true)
	////{//Rキーが押されたとき
	////	if (pFade == CFade::FADE_NONE)
	////	{
	////		CFade::SetFade(CManager::MODE_GAME);//ゲームへ移行
	////	}
	////}
}

//=============================================================================
// 関数名：チュートリアルの描画処理
// 関数の概要：--
//=============================================================================
void CTutorial::Draw()
{
}
